---
- include_tasks: vault_init.yml

- name: Find all key files
  find:
    paths: "{{ ar_tls_ca_base_path }}"
    patterns: '*.key'
    recurse: true
  register: key_files

- name: Create the temp vault src
  template:
    src: ../templates/vault.yml.j2
    dest: "{{ ar_tls_ca_temp_vault_src }}"
  changed_when: false

- name: Create temp secret
  copy:
    dest: "{{ ar_tls_ca_temp_vault_secret }}"
    content: "{{ ar_tls_ca_passphrases[ar_tls_ca_name] | default('password') }}"
    mode: 0600
  changed_when: false

- name: Obtain vault sha1
  shell: "set -o pipefail; ansible-vault view {{ ar_tls_ca_vault_path }} \
            --vault-password-file={{ ar_tls_ca_temp_vault_secret }} \
            | sha1sum | awk '{print $1}'"
  changed_when: false
  register: vault_sha1
  when: vault_file.stat.exists | bool

- name: Obtain new vault sha1
  shell: "sha1sum {{ ar_tls_ca_temp_vault_src }} | awk '{print $1}'"
  register: new_vault_sha1
  changed_when: false
  when: vault_file.stat.exists | bool

- set_fact:
    vault_state_change_required: "{{ not vault_file.stat.exists | bool or new_vault_sha1.stdout != vault_sha1.stdout }}"

- name: Create the vault
  shell: "ansible-vault encrypt {{ ar_tls_ca_temp_vault_src }} \
            --vault-password-file={{ ar_tls_ca_temp_vault_secret }} \
            --output={{ ar_tls_ca_vault_path }}"
  when: vault_state_change_required

- name: Remove tmp secret
  file:
    path: "{{ ar_tls_ca_temp_vault_secret }}"
    state: absent
  changed_when: false

- name: Remove vault src
  file:
    path: "{{ ar_tls_ca_temp_vault_src }}"
    state: absent
  changed_when: false
